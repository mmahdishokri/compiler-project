program			->		dec-list EOF
dec-list		->		dec dec-list
dec-list		-> 		eps
dec				->		type-spec-id dec-2
dec-2 			-> 		var-dec
dec-2			->		fun-dec
var-dec			-> 		arr-spec #var-dec ;
fun-dec			->		( params ) #fun-dec compound-stmt
type-spec-id	->		type-spec PID-ID
PID-ID          ->      #pid ID
arr-spec		->		[ #save-num NUM ]
arr-spec 		->		eps #save-one
type-spec		-> 		int
type-spec		->		void
params			->		void void-param param-list-exp
params			->		int PID-ID param-list-exp
void-param		->		eps
void-param		->		PID-ID
param-list		->		param param-list-exp
param-list-exp	->		, param-list
param-list-exp	->		eps
param			-> 		type-spec PID-ID param-arr-spec
param-arr-spec	->		[]
param-arr-spec	->		e
compound-stmt	-> 		{ dec-list stmt-list }
stmt-list		-> 		stmt stmt-list
stmt-list		-> 		eps
stmt			->		exp-stmt
stmt			->		compound-stmt
stmt			->		selection-stmt
stmt			->		iteration-stmt
stmt			->		return-stmt
stmt			->		switch-stmt
exp-stmt		-> 		exp ;
exp-stmt		-> 		continue ;
exp-stmt		-> 		break ;
selection-stmt	-> 		if ( exp ) stmt else stmt
iteration-stmt	->		while ( exp ) stmt
return-stmt		->		return can-void-exp ;
can-void-exp	->		exp
can-void-exp	->		eps
switch-stmt		->		switch ( exp ) { case-stmts def-stmt }
case-stmts		-> 		eps 
case-stmts		->		case-stmt case-stmts
case-stmt		-> 		case NUM : stmt-list
def-stmt		-> 		eps
def-stmt		->		default : stmt-list
exp				->		PID-ID var-tof
var-tof			-> 		arr-exp-spec var-tof-ari-funny
var-tof			->		( args ) var-tof-ari-funny
var-tof-ari-funny->		= exp #assign
var-tof-ari-funny->		term-suffix additive-exp-suf simple-exp-suff
exp				->		no-var-simple-exp
var				-> 		PID-ID arr-exp-spec
arr-exp-spec	-> 		[ exp ]
arr-exp-spec	->		eps
no-var-simple-exp->		no-var-additive-exp simple-exp-suff
simple-exp		-> 		additive-exp simple-exp-suff
simple-exp-suff	->		relop additive-exp
simple-exp-suff	->		eps
relop			->		<
relop			->		==
no-var-additive-exp->	no-var-term additive-exp-suf
additive-exp	->		term additive-exp-suf
additive-exp-suf->		addop additive-exp
additive-exp-suf-> 		eps
addop			->		+
addop			->		-
no-var-term		-> 		no-var-signed-factor term-suffix
term			-> 		signed-factor term-suffix
term-suffix		->		* term
term-suffix		->		eps
no-var-signed-factor->	no-var-factor
no-var-signed-factor->	+ factor
no-var-signed-factor->	- factor
signed-factor	->		factor
signed-factor	->		+ factor
signed-factor	->		- factor
no-var-factor	->		( exp )
no-var-factor	->		#save-num NUM
factor			->		( exp )
factor			->		var
factor			->		call
factor			->		#save-num NUM
call			->		PID-ID ( args )
args			-> 		arg-list
args			->		eps
arg-list		->		exp arg-list-suffix
arg-list-suffix	->		, arg-list
arg-list-suffix	->		eps